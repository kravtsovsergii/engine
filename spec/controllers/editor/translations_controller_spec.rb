require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Editor::TranslationsController do

  # This should return the minimal set of attributes required to create a valid
  # Editor::Translation. As you add validations to Translation, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {key: "label.common.new", value: "test", language_id: "be", pluralization_index: 1}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Editor::TranslationsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all transltaions as @transltaions" do
      translation = Translation.create! valid_attributes, without_protection: true
      translation_o = Translation.create!(valid_attributes.merge(language_id: "en"),
                                        without_protection: true)
      get :index, {lang: "be"}, valid_session

      response.should be_success

      assigns(:translations).should eq({['label.common.new', 1] => translation})
      assigns(:original_translations).should eq([translation_o])
    end
  end

  describe "GET new" do
    it "assigns a new transltaion as @transltaion" do
      get :new, {}, valid_session
      assigns(:translation).should be_a_new(Translation)
    end
  end

  describe "GET edit" do
    it "assigns the requested transltaion as @transltaion" do
      translation = Translation.create! valid_attributes.merge(language_id: "en"), without_protection: true
      get :edit, {id: translation.to_param}, valid_session
      assigns(:translation).should eq(translation)
    end

    it "creates new translation if language doesn't match" do
      translation = Translation.create! valid_attributes, without_protection: true
      get :edit, {id: translation.to_param}, valid_session
      t = assigns(:translation)
      t.should be_a_new(Translation)
      t.language_id.to_s.should == 'en'
      t.key.should == translation.key
      t.pluralization_index.should == translation.pluralization_index
      t.value.should == translation.value
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Translation" do
        expect {
          post :create, {:translation => valid_attributes}, valid_session
        }.to change(Translation, :count).by(1)
      end

      it "assigns a newly created transltaion as @transltaion" do
        post :create, {:translation => valid_attributes}, valid_session
        assigns(:translation).should be_a(Translation)
        assigns(:translation).should be_persisted
      end

      it "redirects to the created transltaion" do
        post :create, {:translation => valid_attributes}, valid_session
        response.should redirect_to(editor_translations_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved transltaion as @transltaion" do
        # Trigger the behavior that occurs when invalid params are submitted
        Translation.any_instance.stub(:save).and_return(false)
        post :create, {:translation => {}}, valid_session
        assigns(:translation).should be_a_new(Translation)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Translation.any_instance.stub(:save).and_return(false)
        post :create, {:translation => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested transltaion" do
        translation = Translation.create! valid_attributes, without_protection: true
        # Assuming there are no other transltaions in the database, this
        # specifies that the Translation created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Translation.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => translation.to_param, :translation => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested transltaion as @transltaion" do
        translation = Translation.create! valid_attributes, without_protection: true
        put :update, {:id => translation.to_param, :translation => {value: "abc"}}, valid_session
        assigns(:translation).should eq(translation)
      end

      it "redirects to the transltaion" do
        translation = Translation.create! valid_attributes, without_protection: true
        put :update, {id: translation.to_param, translation: {value: "abc"}}, valid_session
        response.should redirect_to(editor_translations_path)
      end
    end

    describe "with invalid params" do
      it "assigns the transltaion as @transltaion" do
        translation = Translation.create! valid_attributes, without_protection: true
        # Trigger the behavior that occurs when invalid params are submitted
        Translation.any_instance.stub(:save).and_return(false)
        put :update, {:id => translation.to_param, :translation => {}}, valid_session
        assigns(:translation).should eq(translation)
      end

      it "re-renders the 'edit' template" do
        translation = Translation.create! valid_attributes, without_protection: true
        # Trigger the behavior that occurs when invalid params are submitted
        Translation.any_instance.stub(:save).and_return(false)
        put :update, {:id => translation.to_param, :translation => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested transltaion" do
      translation = Translation.create! valid_attributes, without_protection: true
      expect {
        delete :destroy, {:id => translation.to_param}, valid_session
      }.to change(Translation, :count).by(-1)
    end

    it "redirects to the transltaions list" do
      translation = Translation.create! valid_attributes, without_protection: true
      delete :destroy, {:id => translation.to_param}, valid_session
      response.should redirect_to(editor_translations_url)
    end
  end

end
